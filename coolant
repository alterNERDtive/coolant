#!/usr/bin/env bash

function printHelp() {
	cat <<EOF
Usage: $(basename "$0") (-a | -p <pid> | -n <name> | -r) [options]

Utility to suspend a game process (and other programs) in Hyprland.

Options:
  -h, --help            show help message

  -a, --active          toggle suspend by active window
  -p, --pid             toggle suspend by process id
  -n, --name            toggle suspend by process name/command
  -r, --prop            toggle suspend by clicking on window (requires xprop 
                        / hyprprop / swayprop)

  -s, --silent          don't send notification
  -t, --notif-timeout   notification timeout in milliseconds (default 5000)
  --info                show information about the process
  --dry-run             doesn't actually perform an action, useful with --info
  --debug               enable debug mode
EOF
}

function die() {
  echo -e "${1:-An unexpected error ocurred.}" >&2
  exit  ${2:-1}
}

function debugPrint() {
  if [ "$DEBUG" -eq 1 ]; then
    echo "[DEBUG] $1"
  fi
}

function toggleFreeze() {
  # Skip this function if --dry-run flag was provided
  if [[ $DRYRUN == "1" ]]; then return 0; fi

  local pid="$1"

  # Die if PID is not numeric (e.g. "null" if there is no active window)
  if ! [[ $pid == ?(-)+([[:digit:]]) ]]; then
    die "PID $pid is not a valid PID." 2
  fi
  
  # Die if nonexistent PID
  if ! ps -p $pid > /dev/null; then
    die "PID $pid does not exist." 130
  fi

  # Get pids of process tree
  local pids=$(pstree -p "$pid" | grep -oP '\(\K[^\)]+')

  debugPrint "PIDs: $pids"

  # Prevent suspending itself
  local pid_of_script=$$
  if echo "$pids" | grep -q "$pid_of_script"; then
    echo "You are trying to suspend the Coolant process."
    exit 1
  fi

  # Suspend or resume processes
  if [[ "$(ps -o state= "$pid")" == T ]]; then
    debugPrint "Resuming processes..."
    kill -CONT $pids 2>/dev/null && echo "Resumed $(ps -p "$pid" -o comm= 2>/dev/null) (PID $pid)" || exit 1
  else
    debugPrint "Suspending processes..."
    kill -STOP $pids 2>/dev/null && echo "Suspended $(ps -p "$pid" -o comm= 2>/dev/null) (PID $pid)" || exit 1
  fi
}

function getPidByActive() {
  local pid
  if [[ "hyprland" == "$DESKTOP" ]]; then
    pid=$(hyprctl activewindow -j | jq '.pid')
  elif [[ "sway" == "$DESKTOP" ]]; then
    pid=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused==true) | .pid')
  else
    echo "Detecting the active window is currently not supported on $DESKTOP."
    exit 1
  fi
  echo $pid
}

function getPidByName() {
  # Check if process name exists
  if ! pidof -x "$1" >/dev/null; then
    die "Process name '$1' not found"
  fi

  # Get last process if there are multiple
  echo "$(pidof "$1" | awk '{ print $NF; }')"
}

function getPidByProp() {
  local pid

  if [[ "hyprland" == "$DESKTOP" ]]; then
    if ! [ $(command -v hyprprop) ]; then
      die "You need to install hyprprop to use this feature. (https://github.com/vilari-mickopf/hyprprop)" 127
    fi

    pid=$(hyprprop | jq '.pid')
  elif [[ "sway" == "$DESKTOP" ]]; then
    if ! [ $(command -v swayprop) ]; then
      die "You need to install swayprop to use this feature. (https://git.alternerd.tv/alterNERDtive/swayprop)" 127
    fi

    pid=$(swayprop | jq '.pid')
  else
    die "Selecting the target window by mouse is currently not supported on $DESKTOP." 130
  fi

  echo "$pid"
}

function detectEnvironment() {
  if [ $(command -v loginctl) ]; then
    local Desktop Type
    eval "$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type -p Desktop)"
    DESKTOP=$Desktop
    SESSION=$Type
  fi

  if [ -z "$DESKTOP" ]; then
    DESKTOP=$XDG_SESSION_DESKTOP
  fi
  if [ -z "$SESSION" ]; then
    SESSION=$XDG_SESSION_TYPE
  fi

  if [ -z "$SESSION" ]; then
    die "Could not determine session type via loginctl, and \$XDG_SESSION_TYPE is not set." 130
  fi
  if [ -z "$DESKTOP" ]; then
    die "Could not determine desktop environment via loginctl, and \$XDG_SESSION_DESKTOP is not set." 130
  fi

  debugPrint "Session: $SESSION"
  debugPrint "Desktop: $DESKTOP"
}

function printInfo() {
  local pid="$1"

  debugPrint "Printing session info â€¦"
  echo -e "$(tput bold)Session:$(tput sgr0) $SESSION"
  echo -e "$(tput bold)Desktop:$(tput sgr0) $DESKTOP"
  echo ""

  debugPrint "Printing process info..."
  echo -e "$(tput bold)Process tree:$(tput sgr0)"
  ps -p "$pid" 2>/dev/null && pstree -p "$pid"
  echo ""

  echo -e "$(tput bold)Process threads:$(tput sgr0)"
  ps -eLo pid,tid,comm | grep "$pid" 2>/dev/null
  echo ""

  echo -e "$(tput bold)Process ID$(tput sgr0) = $pid"
  echo -e "$(tput bold)Process name$(tput sgr0) = $(ps -p "$pid" -o comm= 2>/dev/null)"
  echo -e "$(tput bold)Process state$(tput sgr0) = $(ps -o state= -p "$pid" 2>/dev/null)"
}

function sendNotification() {
  local pid="$@"

  debugPrint "Sending notification..."
  local title=$( [[ "$(ps -p "$pid" -o state=)" == T ]] &&
    echo "Suspended $(ps -p "$pid" -o comm= 2>/dev/null)" ||
    echo "Resumed $(ps -p "$pid" -o comm= 2>/dev/null)")

  notify-send -e "${title}" "PID ${pid}" -t "$NOTIF_TIMEOUT" -a Coolant
}

function args() {
  # Track required flags
  local required_flag_count=0

  # Parse options
  local options="hap:n:rst:"
  local long_options="help,active,pid:,name:,prop,silent,notif-timeout:,info,dry-run,debug"
  local parsed_args
  parsed_args=$(getopt -o "$options" --long "$long_options" -n "$(basename "$0")" -- "$@")

  eval set -- "$parsed_args"
  while true; do
    case $1 in
      -h | --help)
        printHelp
        exit 0
        ;;
      -a | --active)
        ((required_flag_count++))
        FLAG_ACTIVE=true
        ;;
      -p | --pid)
        ((required_flag_count++))
        shift
        FLAG_PID="$1"
        ;;
      -n | --name)
        ((required_flag_count++))
        shift
        NAME_FLAG="$1"
        ;;
      -r | --prop)
        ((required_flag_count++))
        FLAG_PROP=true
        ;;
      -s | --silent)
        SILENT=1
        ;;
      -t | --notif-timeout)
        shift
        NOTIF_TIMEOUT="$1"
        ;;
      --info)
        INFO=1
        ;;
      --dry-run)
        DRYRUN=1
        ;;
      --debug)
        DEBUG=1
        ;;
      --)
        shift # Skip -- argument
        break
        ;;
      *)
        exit 1
        ;;
    esac
    shift
  done

  # Check if more than one required flag is provided, or if none was provided
  if [ $required_flag_count -ne 1 ]; then
    printHelp
    exit 1
  fi
}

function main() {
  local pid
  debugPrint "Starting main function..."
  # Get pid by a required flag
  if [ "$FLAG_ACTIVE" = true ]; then
    pid="$(getPidByActive)"
    debugPrint "PID by active window: $pid"
  elif [ -n "$FLAG_PID" ]; then
    pid="$FLAG_PID"
  elif [ -n "$NAME_FLAG" ]; then
    pid="$(getPidByName "$NAME_FLAG")"
    debugPrint "PID by name: $PID"
  elif [ "$FLAG_PROP" = true ]; then
    pid="$(getPidByProp)"
    debugPrint "PID by prop: $pid"
  fi

  # Suspend or resume process
  toggleFreeze "$pid"

  # Run these functions after PID is obtained
  if [ $INFO -eq 1 ]; then printInfo "$pid"; fi
  if [ $SILENT -ne 1 ]; then sendNotification "$pid"; fi

  debugPrint "End of main function."
}

SILENT=0
NOTIF_TIMEOUT=5000
INFO=0
DRYRUN=0
DEBUG=0

args "$@"

detectEnvironment

main
